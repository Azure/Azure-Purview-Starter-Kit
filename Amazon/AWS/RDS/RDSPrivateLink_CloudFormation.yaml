AWSTemplateFormatVersion: 2010-09-09
Description: Create a VPC Endpoint Service and attach it to the NLB.
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "RDS configuration"
        Parameters: 
          - EndpointPortArray
      - Label: 
          default: "Networking"
        Parameters: 
          - VpcId
          - VpcCidr
          - Subnets
      - Label: 
          default: "Security"
        Parameters: 
          - SGId
    ParameterLabels: 
      EndpointPortArray: 
        default: "Endpoint IP address and port"
      VpcId: 
        default: "VPC"
      VpcCidr: 
        default: "VPC IPv4 CIDR"
      SGId: 
        default: "VPC security group"
Parameters:
  EndpointPortArray:
    Type: String
    AllowedPattern: "^(([0-9]{1,3}\\.){3}[0-9]{1,3}(\\:([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])),?){1,10}$"
    ConstraintDescription: "Malformed input-Parameter Endpoint IP address and port must be in the form of: 192.168.1.1:5432,192.168.2.2:5432,..."
    Description: "The resolved IP address of the RDS endpoint URL and port, in the following format: 192.168.1.1:5432. For multiple RDS endpoints in the same VPC, enter up to 10 values separated by commas. For example: 192.168.1.1:5432,192.168.2.2:5432"
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
  VpcCidr:
    Type: String
    ConstraintDescription: "Malformed input-Parameter VPC IPv4 CIDR must be in the form of: 192.168.0.0/16"
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    Description: "In the Amazon RDS configuration page, select the VPC link to find its IPv4 CIDR. For example: 192.168.0.0/16"
  SGId:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: 'Select the RDS SG'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: 'Select all subnets associated with the selected VPC'
Conditions:
  Rds1Exist: !Not [ !Equals [!Select [0, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds2Exist: !Not [ !Equals [!Select [1, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds3Exist: !Not [ !Equals [!Select [2, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds4Exist: !Not [ !Equals [!Select [3, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds5Exist: !Not [ !Equals [!Select [4, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds6Exist: !Not [ !Equals [!Select [5, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds7Exist: !Not [ !Equals [!Select [6, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds8Exist: !Not [ !Equals [!Select [7, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds9Exist: !Not [ !Equals [!Select [8, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Rds10Exist: !Not [ !Equals [!Select [9, !Split [ ",", !Sub '${EndpointPortArray},,,,,,,,,,']], ""]]
  Subnet1Exist: 
    Fn::Not: 
      - Fn::Equals:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ","
            - Fn::Sub:
              - ${SubnetsIds},,, 
              - { SubnetsIds: !Join [',', !Ref Subnets] }
        - ""
  Subnet2Exist: 
    Fn::Not: 
    - Fn::Equals:
        - Fn::Select:
          - 1
          - Fn::Split:
            - ","
            - Fn::Sub:
              - ${SubnetsIds},,,
              - { SubnetsIds: !Join [',', !Ref Subnets] }
        - ""
  Subnet3Exist: 
    Fn::Not: 
      - Fn::Equals:
        - Fn::Select:
          - 2
          - Fn::Split:
            - ","
            - Fn::Sub:
              - ${SubnetsIds},,, 
              - { SubnetsIds: !Join [',', !Ref Subnets] }
        - ""
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: Selected subnets must be a part of the selected VPC
Resources:
  SecurityGroupIngressRule:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !Ref SGId
      IpProtocol: tcp
      FromPort: !If [Rds2Exist, 101, !Select [1, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]]
      ToPort: !If [Rds2Exist, 110, !Select [1, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]]
      CidrIp: !Ref VpcCidr
      Description: 'Rule to enable Purview scans for RDS resources'
  EndpointServiceNetworkLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-nlb'
      Type: network
      Scheme: internal
      Subnets:
      Subnets:
        - !If [Subnet1Exist, !Select [ 0, !Ref Subnets ], !Ref "AWS::NoValue"]
        - !If [Subnet2Exist, !Select [ 1, !Ref Subnets ], !Ref "AWS::NoValue"]
        - !If [Subnet3Exist, !Select [ 2, !Ref Subnets ], !Ref "AWS::NoValue"]
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-nlb'
  EndpointService:
    Type: 'AWS::EC2::VPCEndpointService'
    Properties:
      AcceptanceRequired: false
      NetworkLoadBalancerArns:
        - !Ref EndpointServiceNetworkLoadBalancer
  EndpointServicePermissions:
    Type: 'AWS::EC2::VPCEndpointServicePermissions'
    Properties:
      AllowedPrincipals:
        - 'arn:aws:iam::181328463391:root'
      ServiceId: !Ref EndpointService
  EndpointServiceNetworkLoadBalancerListener1:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds1Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup1
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: !If [Rds2Exist, 101, !Select [1, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]]
      Protocol: TCP 
  EndpointServiceTargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds1Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-1'
      Port: !If [Rds2Exist, 101, !Select [1, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]]
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-1'
  EndpointServiceNetworkLoadBalancerListener2:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds2Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup2
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 102
      Protocol: TCP 
  EndpointServiceTargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds2Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-2'
      Port: 102
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [1, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [1, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [1, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-2'
  EndpointServiceNetworkLoadBalancerListener3:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds3Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup3
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 103
      Protocol: TCP 
  EndpointServiceTargetGroup3:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds3Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-3'
      Port: 103
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [2, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [2, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [2, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-3'
  EndpointServiceNetworkLoadBalancerListener4:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds4Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup4
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 104
      Protocol: TCP 
  EndpointServiceTargetGroup4:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds4Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-4'
      Port: 104
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [3, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [3, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [3, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-4'
  EndpointServiceNetworkLoadBalancerListener5:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds5Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup5
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 105
      Protocol: TCP 
  EndpointServiceTargetGroup5:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds5Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-5'
      Port: 105
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [4, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [4, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [4, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-5'
  EndpointServiceNetworkLoadBalancerListener6:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds6Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup6
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 106
      Protocol: TCP 
  EndpointServiceTargetGroup6:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds6Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-6'
      Port: 106
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [5, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [5, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [5, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-6'
  EndpointServiceNetworkLoadBalancerListener7:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds7Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup7
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 107
      Protocol: TCP 
  EndpointServiceTargetGroup7:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds7Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-7'
      Port: 107
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [6, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [6, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [6, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-7'
  EndpointServiceNetworkLoadBalancerListener8:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds8Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup8
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 108
      Protocol: TCP 
  EndpointServiceTargetGroup8:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds8Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-8'
      Port: 108
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [7, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [7, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [7, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-8'
  EndpointServiceNetworkLoadBalancerListener9:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds9Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup9
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 109
      Protocol: TCP 
  EndpointServiceTargetGroup9:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds9Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-9'
      Port: 109
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [8, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [8, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [8, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-9'
  EndpointServiceNetworkLoadBalancerListener10:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: Rds10Exist
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup10
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 110
      Protocol: TCP 
  EndpointServiceTargetGroup10:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: Rds10Exist
    Properties:
      Name:  !Sub '${AWS::StackName}-Purview-tg-10'
      Port: 110
      Protocol: TCP
      TargetType: ip
      HealthCheckPort: !Select [1, !Split [":", !Select [9, !Split [ ",", !Ref EndpointPortArray]]]]
      HealthCheckProtocol: TCP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '90'
      Targets:
        - Id: !Select [0, !Split [":", !Select [9, !Split [ ",", !Ref EndpointPortArray]]]]
          Port: !Select [1, !Split [":", !Select [9, !Split [ ",", !Ref EndpointPortArray]]]]
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-Purview-tg-10'
Outputs:
  ServiceName:
    Description: Service Name of the VPC endpoint service
    Value: !Sub 'com.amazonaws.vpce.${AWS::Region}.${EndpointService}'
  RDSServer1:
    Description: IP address and port of RDS server 1
    Value: !Sub
      - ${IP}:${PORT}
      - { IP: !Select [0, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]] , PORT: !If [Rds2Exist, 101, !Select [1, !Split [":", !Select [0, !Split [ ",", !Ref EndpointPortArray]]]]] }
    Condition: Rds1Exist
  RDSServer2:
    Description: IP address and port of RDS server 2
    Value: !Sub
      - ${IP}:102
      - { IP: !Select [0, !Split [":", !Select [1, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds2Exist
  RDSServer3:
    Description: IP address and port of RDS server 3
    Value: !Sub
      - ${IP}:103
      - { IP: !Select [0, !Split [":", !Select [2, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds3Exist
  RDSServer4:
    Description: IP address and port of RDS server 4
    Value: !Sub
      - ${IP}:104
      - { IP: !Select [0, !Split [":", !Select [3, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds4Exist
  RDSServer5:
    Description: IP address and port of RDS server 5
    Value: !Sub
      - ${IP}:105
      - { IP: !Select [0, !Split [":", !Select [4, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds5Exist
  RDSServer6:
    Description: IP address and port of RDS server 6
    Value: !Sub
      - ${IP}:106
      - { IP: !Select [0, !Split [":", !Select [5, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds5Exist
  RDSServer7:
    Description: IP address and port of RDS server 7
    Value: !Sub
      - ${IP}:107
      - { IP: !Select [0, !Split [":", !Select [6, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds7Exist
  RDSServer8:
    Description: IP address and port of RDS server 8
    Value: !Sub
      - ${IP}:108
      - { IP: !Select [0, !Split [":", !Select [7, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds8Exist
  RDSServer9:
    Description: IP address and port of RDS server 9
    Value: !Sub
      - ${IP}:109
      - { IP: !Select [0, !Split [":", !Select [8, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds9Exist
  RDSServer10:
    Description: IP address and port of RDS server 10
    Value: !Sub
      - ${IP}:110
      - { IP: !Select [0, !Split [":", !Select [9, !Split [ ",", !Ref EndpointPortArray]]]] }
    Condition: Rds10Exist